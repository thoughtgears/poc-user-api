name: Docker Build and Push

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - '.github/workflows/terraform.yml'
      - './.infrastructure'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - '.github/workflows/terraform.yml'
      - './.infrastructure'
  repository_dispatch:
    types: [terraform-completed]
  workflow_run:
    workflows: ["Terraform Apply"]
    types:
      - completed

jobs:
  check-workflow-source:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
    steps:
      - id: check
        name: Check if triggered by Terraform workflow
        if: github.event_name == 'workflow_run'
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "Terraform workflow did not succeed, skipping Docker build"
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "Terraform workflow succeeded, proceeding with Docker build"
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

  fetch-terraform-outputs:
    needs: check-workflow-source
    if: needs.check-workflow-source.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SA }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"

      - name: Configure Terraform State Backend
        run: |
          SERVICE_NAME=$(jq -r '.name' package.json)
          cd .infrastructure
          cat > backend.tf << EOF
          terraform {
            backend "gcs" {
              bucket = "${{ vars.TERRAFORM_STATE_BUCKET }}"
              prefix = "${SERVICE_NAME}"
            }
          }
          EOF

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          cd .infrastructure
          terraform init
          
          # Get artifact repository URL with fallback
          if terraform output -json 2>/dev/null | jq -e '.artifact_repository_url' > /dev/null; then
            DOCKER_REPO=$(terraform output -json | jq -r '.artifact_repository_url.value')
            echo "Found Docker repository in Terraform state: ${DOCKER_REPO}"
          else
            DOCKER_REPO="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/default-registry"
            echo "Using default Docker repository: ${DOCKER_REPO}"
          fi
          
          echo "docker_repo=${DOCKER_REPO}" >> $GITHUB_OUTPUT

    outputs:
      docker_repo: ${{ steps.terraform-output.outputs.docker_repo }}

  docker-build:
    needs: fetch-terraform-outputs
    uses: ./.github/workflows/shared-docker-build.yml
    with:
      gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
      gcp_region: ${{ vars.GCP_REGION }}
      wif_provider: ${{ vars.WIF_PROVIDER }}
      wif_sa: ${{ vars.WIF_SA }}
      docker_repo: ${{ needs.fetch-terraform-outputs.outputs.docker_repo }}

  post-build:
    needs: [docker-build, fetch-terraform-outputs]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Docker image digest
        run: |
          # Get service name
          SERVICE_NAME=$(jq -r '.name' package.json)
          
          echo "Docker image digest: ${{ needs.docker-build.outputs.digest }}"
          
          # Store values in environment variables
          echo "DOCKER_IMAGE_DIGEST=${{ needs.docker-build.outputs.digest }}" >> $GITHUB_ENV
          echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_ENV
          echo "DOCKER_REPO=${{ needs.fetch-terraform-outputs.outputs.docker_repo }}" >> $GITHUB_ENV
          
          # Create full image reference with digest
          echo "IMAGE=${{ needs.fetch-terraform-outputs.outputs.docker_repo }}/${{ env.SERVICE_NAME }}@${{ needs.docker-build.outputs.digest }}" >> $GITHUB_ENV
