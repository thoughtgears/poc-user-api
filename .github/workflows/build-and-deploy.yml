name: Build and Deploy Service

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - '.github/workflows/terraform.yml'
      - './.infrastructure'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - '.github/workflows/terraform.yml'
      - './.infrastructure'
  repository_dispatch:
    types: [terraform-completed]
  workflow_run:
    workflows: ["Terraform Apply"]
    types:
      - completed

jobs:
  check-workflow-source:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
    steps:
      - id: check
        name: Check if triggered by Terraform workflow
        if: github.event_name == 'workflow_run'
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "Terraform workflow did not succeed, skipping Docker build"
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "Terraform workflow succeeded, proceeding with Docker build"
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

  fetch-terraform-outputs:
    needs: check-workflow-source
    if: needs.check-workflow-source.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      service_name: ${{ steps.get-service.outputs.service_name }}
      docker_repo: ${{ steps.terraform-output.outputs.docker_repo }}
      service_account_email: ${{ steps.terraform-output.outputs.service_account_email }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SA }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"

      - name: Configure Terraform State Backend
        run: |
          SERVICE_NAME=$(jq -r '.name' package.json)
          cd .infrastructure
          cat > backend.tf << EOF
          terraform {
            backend "gcs" {
              bucket = "${{ vars.TERRAFORM_STATE_BUCKET }}"
              prefix = "${SERVICE_NAME}"
            }
          }
          EOF

      - name: Get Service Name # Moved here or duplicated if needed earlier
        id: get-service
        run: |
          if [ -f "package.json" ]; then
           SERVICE_NAME=$(jq -r '.name' package.json)
           echo "service_name=${SERVICE_NAME}" >> $GITHUB_OUTPUT
          else
           REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)
           echo "service_name=${REPOSITORY_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          cd .infrastructure
          terraform init
          
          if terraform output -json 2>/dev/null | jq -e '.artifact_repository_url' > /dev/null; then
            DOCKER_REPO=$(terraform output -json | jq -r '.artifact_repository_url.value')
          else
            DOCKER_REPO="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/default-registry"
          fi
          
          if terraform output -json 2>/dev/null | jq -e '.run_service_account' > /dev/null; then
            SERVICE_ACCOUNT_EMAIL=$(terraform output -json | jq -r '.run_service_account.value')
          else
            SERVICE_ACCOUNT_EMAIL="default-compute@${{ vars.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          fi
          
          echo "docker_repo=${DOCKER_REPO}" >> $GITHUB_OUTPUT
          echo "service_name=${{ steps.get-service.outputs.service_name }}" >> $GITHUB_OUTPUT

  docker-build:
    needs: fetch-terraform-outputs
    uses: ./.github/workflows/shared-docker-build.yml
    with:
      gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
      gcp_region: ${{ vars.GCP_REGION }}
      wif_provider: ${{ vars.WIF_PROVIDER }}
      wif_sa: ${{ vars.WIF_SA }}
      docker_repo: ${{ needs.fetch-terraform-outputs.outputs.docker_repo }}

  post-build: # Renamed for clarity, or keep existing name
    # This job now primarily calculates the final image name
    needs: [docker-build, fetch-terraform-outputs]
    if: needs.check-workflow-source.outputs.should_skip != 'true' # Ensure this job respects the skip condition
    runs-on: ubuntu-latest
    outputs:
      image_ref: ${{ steps.set-image-ref.outputs.image_ref }}
      service_name: ${{ needs.fetch-terraform-outputs.outputs.service_name }}
      service_account_email: ${{ needs.fetch-terraform-outputs.outputs.service_account_email }}

    steps:
      - name: Calculate Full Image Reference
        id: set-image-ref
        run: |
          echo "Docker image digest: ${{ needs.docker-build.outputs.digest }}"
          IMAGE_REF="${{ needs.fetch-terraform-outputs.outputs.docker_repo }}/${{ needs.fetch-terraform-outputs.outputs.service_name }}@${{ needs.docker-build.outputs.digest }}"
          echo "Calculated Image Reference: ${IMAGE_REF}"
          echo "image_ref=${IMAGE_REF}" >> $GITHUB_OUTPUT

  deploy:
    needs: [post-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Cloud Run Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account:  ${{ vars.WIF_SA }}

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      # Using https://github.com/google-github-actions/deploy-cloudrun to deploy
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ needs.post-build.outputs.service_name }}
          image: ${{ needs.post-build.outputs.image_ref }}
          region: ${{ vars.GCP_REGION }}
          project_id: ${{ vars.GCP_PROJECT_ID }}
          suffix: ${{ env.COMMIT_SHORT_SHA }}
          tag: ${{ env.COMMIT_SHORT_SHA }}
          flags: '--service-account=${{ needs.post-build.outputs.service_account_email }} --no-allow-unauthenticated'

#  trigger-deploy:
#    needs: [post-build]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    permissions:
#      actions: write
#
#    steps:
#      - name: Trigger Cloud Deploy Workflow
#        uses: actions/github-script@v7
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            await github.rest.actions.createWorkflowDispatch({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              workflow_id: 'shared-cloud-deploy.yml',
#              ref: 'main',
#              inputs: {
#                image_reference: '${{ needs.post-build.outputs.image_ref }}',
#                service_name: '${{ needs.post-build.outputs.service_name }}'
#              }
#            })
#            console.log('Successfully triggered Cloud Deploy workflow with image: ${{ needs.post-build.outputs.image_ref }}')
